# -*- coding: utf-8 -*-
"""Code_pnsSim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EZgsc2mti4eY__eNbT4-TG-4HHqBLuEi
"""

import numpy as np
import matplotlib.pyplot as plt

#np.random.seed(42)

def toss_coin(p_heads, n_trials):
    outcomes = np.random.choice(['H', 'T'], size=n_trials, p=[p_heads, 1 - p_heads])
    return outcomes

def plot_single_outcomes(outcomes):
    plt.figure(figsize=(8, 6))
    plt.plot(range(1, len(outcomes) + 1), outcomes, marker='o', linestyle='-', color='b')
    plt.xlabel('Trial Number')
    plt.ylabel('Outcome (H or T)')
    plt.title('Outcomes of Coin Tosses (Single Trial)')
    plt.xticks(np.arange(1, len(outcomes) + 1, step=max(1, len(outcomes) // 10)))
    plt.yticks(np.arange(0, 2, step=1), ['T', 'H'])
    plt.grid(True)
    plt.show()

def plot_repeated_outcomes(repeats):
    plt.figure(figsize=(8, 6))
    for i, outcomes in enumerate(repeats, start=1):
        plt.plot(range(1, len(outcomes) + 1), outcomes, marker='o', linestyle='-', label=f'Repeat {i}', alpha=0.5)
    plt.xlabel('Trial Number')
    plt.ylabel('Outcome (H or T)')
    plt.title('Outcomes of Coin Tosses (5 Repeats)')
    plt.xticks(np.arange(1, len(outcomes) + 1, step=max(1, len(outcomes) // 10)))
    plt.yticks(np.arange(0, 2, step=1), ['T', 'H'])
    plt.grid(True)
    plt.legend()
    plt.show()

def plot_head_counts_histogram(head_counts, title):
    plt.figure(figsize=(10, 6))
    plt.hist(head_counts, bins=np.arange(max(head_counts) + 2) - 0.5, density=True, alpha=0.75, color='b', edgecolor='black')
    plt.xlabel('Total Number of Heads')
    plt.ylabel('Frequency of Occurrence')
    plt.title(title)
    plt.xticks(np.arange(max(head_counts) + 1))
    plt.grid(True)
    plt.show()

p_heads = 0.2
n_trials = 20
num_repeats_b = 5

outcomes_single = toss_coin(p_heads, n_trials)
plot_single_outcomes(outcomes_single)

repeats = [toss_coin(p_heads, n_trials) for _ in range(num_repeats_b)]
plot_repeated_outcomes(repeats)

sequences_all = [toss_coin(p_heads, n_trials) for _ in range(100)]
head_counts_all = [np.sum(sequence == 'H') for sequence in sequences_all]

plot_head_counts_histogram(head_counts_all, 'Histogram of Total Number of Heads in All 100 Sequences')

sequences_sum_to_3 = [sequence for sequence in sequences_all if np.sum(sequence == 'H') >= 3]
head_counts_sum_to_3 = [np.sum(sequence == 'H') for sequence in sequences_sum_to_3]

plot_head_counts_histogram(head_counts_sum_to_3, 'Histogram of Total Number of Heads in Sequences with at Least 3 Heads')

"""1) a) We define a function 'toss_coin' to simulate a coin toss with a given probability. We define another function 'plot_single_outcomes' to plot the outcomes of a single trial against the trial number. We observe that the plot of coin toss outcomes against trial number displays a random pattern, with each trial showing either heads or tails.

1) b) We now repeat the process 5 times and plot the outcomes for each repeat against the trial number. This helps us compare the outcomes of multiple trials. We define a function 'plot_repeated_outcomes' as use that to observe the outcomes of various trials on the same figure. We can gather that as the number of trials increases, the outcomes tend to cluster around the expected value, illustrating the convergence towards the expected outcome as per the law of large numbers.

1) c) We repeat the coin toss experiment 100 times and count the number of heads in each sequences and use that to plot a histogram to see how often the different numbers of heads occur. We observe that the mean is at 4 and that the probability of getting more than 8 heads is very less. As we are considering the outcome of heads to be a success and counting the number of heads, it approximates the pmf of the binomial distribution.

1) d) With the array obtained in the previous part, we chose all the sequences that sum to atleast 3 and make a histogram out of it. We observed that this histogram approximates the probability mass function of the binomial distribution.
"""

import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)

alphas = np.random.uniform(1, 20, 4)

num_experiments = 10000

poisson_results = []
binomial_results = []

for alpha in alphas:
    poisson_samples = np.random.poisson(alpha, num_experiments)
    poisson_results.append(poisson_samples)

    n = max(10, int(alpha * 2))
    p = alpha / n

    binomial_samples = np.random.binomial(n, p, num_experiments)
    binomial_results.append(binomial_samples)

plt.figure(figsize=(12, 8))
for i, alpha in enumerate(alphas, start=1):
    plt.subplot(2, 4, i)
    plt.hist(poisson_results[i-1], bins=20, alpha=0.5, label='Poisson', color='blue')
    plt.title(f'Poisson (Alpha = {alpha:.2f})')
    plt.xlabel('Value')
    plt.ylabel('Frequency')
    plt.legend()
    plt.grid(True)

    plt.subplot(2, 4, i+4)
    plt.hist(binomial_results[i-1], bins=20, alpha=0.5, label='Binomial', color='red')
    plt.title(f'Binomial (Alpha = {alpha:.2f})')
    plt.xlabel('Value')
    plt.ylabel('Frequency')
    plt.legend()
    plt.grid(True)

plt.tight_layout()
plt.show()

"""Here, I used four values of alpha and used it to simulate a binonmial rv and a poisson rv. I chose a large number of experiments to ensure that the resulting histograms are good approximations of the pmfs. I also  increased the value of n to be the max(10,alpha*2) and adjusted p. We also observe that the histrograms/pmfs look similar.

"""

import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)

def simulate_poisson_sum(alpha, num_vars):
    return np.random.poisson(alpha, num_vars).sum()

alphas = np.random.uniform(1, 20, 2)
sequence_lengths = [5, 10, 100, 1000]
plt.figure(figsize=(12, 8))

for i, alpha in enumerate(alphas, start=1):
    sum_results = []
    for num_vars in sequence_lengths:

        sums = [simulate_poisson_sum(alpha, num_vars) for _ in range(1000)]
        sum_results.extend(sums)

        plt.subplot(2, 2, i)
        plt.hist(sums, bins=30, alpha=0.5, label=f'n = {num_vars}')
        plt.title(f'Sum of Poisson RVs (Alpha = {alpha:.2f})')
        plt.xlabel('Sum')
        plt.ylabel('Frequency')
        plt.legend()

plt.show()

"""Here, I chose two random values of alpha between 1 and 20 and took the sequence as 5,10,100,1000. We observe that as the value of n increases, there is a larger convergence to a bell shaped curve based on the central limit theorem."""